// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // ARegister
    Not(in=instruction[15], out=isa);
    Or(a=isa, b=instruction[5], out=aload);
    Mux16(a=aluout, b=instruction, sel=isa, out=ain);
    ARegister(in=ain, load=aload, out=aout, out[0..14]=addressM);

    // ALU y
    Mux16(a=aout, b=inM, sel=instruction[12], out=aluy);

    // ALU x DRegister
    And(a=instruction[15], b=instruction[4], out=dload);
    DRegister(in=aluout, load=dload, out=alux);

    // ALU
    ALU(x=alux, y=aluy, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, zr=zr, ng=ng);

    // outM
    Mux16(b=aluout, sel=willWrite, out=outM);
    // writeM
    And(a=instruction[15], b=instruction[3], out=willWrite, out=writeM);

    // PC
    DMux8Way(in=true, sel=instruction[0..2], a=JNL, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=JMP);

    Not(in=le, out=gt);
    Or(a=zr, b=ng, out=le);
    Not(in=ng, out=ge);
    Not(in=zr, out=nzr);

    And(a=jgt, b=gt, out=JGT);
    And(a=jeq, b=zr, out=JEQ);
    And(a=jge, b=ge, out=JGE);
    And(a=jlt, b=ng, out=JLT);
    And(a=jne, b=nzr, out=JNE);
    And(a=jle, b=le, out=JLE);

    Or8Way(in[0]=false, in[1]=JGT, in[2]=JEQ, in[3]=JGE, in[4]=JLT, in[5]=JNE, in[6]=JLE, in[7]=JMP, out=pcload1);
    And(a=instruction[15], b=pcload1, out=pcload);
    Not(in=pcload, out=nload);
    Or(a=nload, b=JNL, out=inc);

    PC(in=aout, reset=reset, load=pcload, inc=inc, out[0..14]=pc);
}